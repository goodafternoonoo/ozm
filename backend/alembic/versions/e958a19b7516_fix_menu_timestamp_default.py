"""fix menu timestamp default

Revision ID: e958a19b7516
Revises: 
Create Date: 2025-06-23 14:13:24.254235

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e958a19b7516'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_interactions_session_id', table_name='user_interactions')
    op.drop_table('user_interactions')
    op.drop_index('ix_recommendations_recommendation_type', table_name='recommendations')
    op.drop_index('ix_recommendations_session_id', table_name='recommendations')
    op.drop_table('recommendations')
    op.drop_index('ix_categories_country', table_name='categories')
    op.drop_index('ix_categories_cuisine_type', table_name='categories')
    op.drop_index('ix_categories_name', table_name='categories')
    op.drop_table('categories')
    op.drop_index('ix_favorites_menu_id', table_name='favorites')
    op.drop_index('ix_favorites_user_id', table_name='favorites')
    op.drop_table('favorites')
    op.drop_index('ix_menus_difficulty', table_name='menus')
    op.drop_index('ix_menus_display_order', table_name='menus')
    op.drop_index('ix_menus_has_meat', table_name='menus')
    op.drop_index('ix_menus_has_rice', table_name='menus')
    op.drop_index('ix_menus_has_soup', table_name='menus')
    op.drop_index('ix_menus_is_active', table_name='menus')
    op.drop_index('ix_menus_is_healthy', table_name='menus')
    op.drop_index('ix_menus_is_quick', table_name='menus')
    op.drop_index('ix_menus_is_spicy', table_name='menus')
    op.drop_index('ix_menus_is_vegetarian', table_name='menus')
    op.drop_index('ix_menus_name', table_name='menus')
    op.drop_index('ix_menus_time_slot', table_name='menus')
    op.drop_table('menus')
    op.drop_index('ix_user_preferences_session_id', table_name='user_preferences')
    op.drop_table('user_preferences')
    op.drop_index('ix_user_answers_session_id', table_name='user_answers')
    op.drop_table('user_answers')
    op.drop_index('ix_questions_question_type', table_name='questions')
    op.drop_table('questions')
    op.drop_index('ix_users_kakao_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('nickname', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('kakao_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_kakao_id', 'users', ['kakao_id'], unique=False)
    op.create_table('questions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('text', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('question_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('options', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='questions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_questions_question_type', 'questions', ['question_type'], unique=False)
    op.create_table('user_answers',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name='user_answers_question_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_answers_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_answers_pkey')
    )
    op.create_index('ix_user_answers_session_id', 'user_answers', ['session_id'], unique=False)
    op.create_table('user_preferences',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('spicy_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('healthy_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('vegetarian_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('quick_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rice_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('soup_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('meat_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('breakfast_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lunch_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dinner_preference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('country_preferences', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('total_interactions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_preferences_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_preferences_pkey')
    )
    op.create_index('ix_user_preferences_session_id', 'user_preferences', ['session_id'], unique=False)
    op.create_table('menus',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('time_slot', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_spicy', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_healthy', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_vegetarian', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_quick', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_rice', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_soup', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_meat', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ingredients', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('cooking_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cuisine_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('spicy_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('calories', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('protein', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('carbs', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('prep_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('difficulty', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='menus_category_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='menus_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_menus_time_slot', 'menus', ['time_slot'], unique=False)
    op.create_index('ix_menus_name', 'menus', ['name'], unique=False)
    op.create_index('ix_menus_is_vegetarian', 'menus', ['is_vegetarian'], unique=False)
    op.create_index('ix_menus_is_spicy', 'menus', ['is_spicy'], unique=False)
    op.create_index('ix_menus_is_quick', 'menus', ['is_quick'], unique=False)
    op.create_index('ix_menus_is_healthy', 'menus', ['is_healthy'], unique=False)
    op.create_index('ix_menus_is_active', 'menus', ['is_active'], unique=False)
    op.create_index('ix_menus_has_soup', 'menus', ['has_soup'], unique=False)
    op.create_index('ix_menus_has_rice', 'menus', ['has_rice'], unique=False)
    op.create_index('ix_menus_has_meat', 'menus', ['has_meat'], unique=False)
    op.create_index('ix_menus_display_order', 'menus', ['display_order'], unique=False)
    op.create_index('ix_menus_difficulty', 'menus', ['difficulty'], unique=False)
    op.create_table('favorites',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('menu_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['menu_id'], ['menus.id'], name='favorites_menu_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='favorites_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='favorites_pkey')
    )
    op.create_index('ix_favorites_user_id', 'favorites', ['user_id'], unique=False)
    op.create_index('ix_favorites_menu_id', 'favorites', ['menu_id'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('cuisine_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('icon_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('color_code', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_categories_name', 'categories', ['name'], unique=False)
    op.create_index('ix_categories_cuisine_type', 'categories', ['cuisine_type'], unique=False)
    op.create_index('ix_categories_country', 'categories', ['country'], unique=False)
    op.create_table('recommendations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('menu_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('recommendation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['menu_id'], ['menus.id'], name='recommendations_menu_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='recommendations_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='recommendations_pkey')
    )
    op.create_index('ix_recommendations_session_id', 'recommendations', ['session_id'], unique=False)
    op.create_index('ix_recommendations_recommendation_type', 'recommendations', ['recommendation_type'], unique=False)
    op.create_table('user_interactions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('menu_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('interaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('interaction_strength', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('extra_data', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['menu_id'], ['menus.id'], name='user_interactions_menu_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_interactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_interactions_pkey')
    )
    op.create_index('ix_user_interactions_session_id', 'user_interactions', ['session_id'], unique=False)
    # ### end Alembic commands ###
