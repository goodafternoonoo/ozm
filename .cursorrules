# OZM (음식 추천 시스템) 프로젝트 규칙

## 프로젝트 구조
- `backend/`: FastAPI 백엔드 (Python)
- `frontend/`: React Native 프론트엔드 (TypeScript)
- `scripts/`: 유틸리티 스크립트

## 코딩 스타일 및 컨벤션

### Python (Backend)
- **Python 버전**: 3.11+
- **코드 스타일**: PEP 8 준수
- **타입 힌트**: 모든 함수와 메서드에 타입 힌트 사용
- **문서화**: docstring 사용 (Google 스타일)
- **비동기**: FastAPI와 SQLAlchemy 비동기 패턴 사용
- **예외 처리**: 구체적인 예외 타입 사용

### TypeScript (Frontend)
- **TypeScript**: 엄격한 타입 체크 사용
- **React Native**: 함수형 컴포넌트와 Hooks 사용
- **스타일링**: StyleSheet API 사용
- **네비게이션**: React Navigation 사용

## 데이터베이스 규칙
- **ORM**: SQLAlchemy 2.0+ 사용
- **마이그레이션**: Alembic 사용 (필요시)
- **UUID**: 모든 ID는 UUID 사용
- **인덱스**: 자주 조회되는 컬럼에 인덱스 추가
- **제약조건**: 적절한 NOT NULL, UNIQUE 제약조건 사용

## 개발 규칙
- **개발 프로세스**: 설계/구현/테스트 순서로 진행
- **테스트 반복**: 모든 신규/수정된 코드는 반드시 테스트를 작성하고, 테스트가 성공할 때까지 "테스트 → 수정 → 테스트 → ..." 과정을 반복할 것

## API 설계 규칙
- **RESTful**: REST API 설계 원칙 준수
- **버전 관리**: `/api/v1/` 형태로 버전 관리
- **응답 형식**: 일관된 JSON 응답 구조 사용
- **에러 처리**: HTTP 상태 코드 적절히 사용
- **검증**: Pydantic 스키마로 요청/응답 검증

## 테스트 규칙
- **백엔드**: pytest + pytest-asyncio 사용
- **테스트 DB**: SQLite in-memory 사용
- **커버리지**: 최소 80% 이상 유지
- **통합 테스트**: API 엔드포인트 테스트 포함

## 보안 규칙
- **환경 변수**: 민감한 정보는 .env 파일 사용
- **API 키**: 하드코딩 금지
- **입력 검증**: 모든 사용자 입력 검증
- **SQL 인젝션**: ORM 사용으로 방지

## 성능 규칙
- **데이터베이스**: 적절한 인덱스와 쿼리 최적화
- **캐싱**: Redis 사용 고려 (필요시)
- **비동기**: I/O 작업은 비동기 처리
- **연결 풀**: 데이터베이스 연결 풀 설정

## 파일 및 폴더 명명 규칙
- **Python**: snake_case 사용
- **TypeScript**: camelCase 사용
- **컴포넌트**: PascalCase 사용
- **상수**: UPPER_SNAKE_CASE 사용

## Git 규칙
- **브랜치**: dev/, feature/, hotfix/, release/ 접두사 사용
- **커밋**: 명확하고 설명적인 커밋 메시지
- **메인 브랜치**: main 또는 master 사용

## 문서화 규칙
- **README**: 프로젝트 설정 및 실행 방법 포함
- **API 문서**: FastAPI 자동 문서화 활용
- **주석**: 복잡한 로직에 한글 주석 추가
- **변경사항**: CHANGELOG.md 유지

## 배포 규칙
- **환경 분리**: 개발/프로덕션 환경 분리
- **CI/CD**: GitHub Actions 또는 유사한 도구 사용
- **모니터링**: 로깅 및 에러 추적 시스템 구축

## 특별 규칙 (이 프로젝트)
- **음식 데이터**: 각 나라별 음식 중심으로 설계
- **추천 알고리즘**: 사용자 선호도 기반 가중치 시스템 / SNS 트렌드 기반 추천
- **UI/UX**: 직관적이고 사용하기 쉬운 인터페이스

## 음식 추천 시스템 특화 규칙

### 데이터 모델링
- **메뉴 속성**: 매운맛, 건강식, 채식, 빠른조리 등 명확한 속성 정의
- **시간대**: 아침/점심/저녁 구분 명확히
- **영양 정보**: 칼로리, 단백질, 탄수화물, 지방 정보 포함
- **난이도**: 쉬움/보통/어려움으로 구분 / 조리 시간 포함

### 추천 알고리즘
- **가중치 시스템**: 사용자 답변에 따른 속성별 가중치 계산
- **점수 계산**: 메뉴별 추천 점수 산출 로직
- **다양성**: 추천 결과의 다양성 보장
- **개인화**: 사용자별 선호도 학습

### 프론트엔드 UX
- **질문 플로우**: 단계별 질문 진행
- **결과 표시**: 추천 메뉴 카드 형태로 표시
- **필터링**: 시간대, 선호도별 필터링
- **즐겨찾기**: 사용자별 즐겨찾기 기능

### 데이터 관리
- **샘플 데이터**: 한국 음식 중심의 다양한 샘플 메뉴
- **카테고리**: 메인요리, 반찬, 국물요리 등 분류
- **이미지**: 메뉴별 대표 이미지 관리
- **설명**: 각 메뉴의 상세 설명과 특징

## 금지사항
- 하드코딩된 데이터베이스 연결 정보
- 민감한 정보를 코드에 직접 포함
- 테스트 코드 없이 기능 추가
- 적절한 에러 처리 없이 예외 발생 가능한 코드
- 성능을 고려하지 않은 N+1 쿼리
- 추천 알고리즘의 편향성 (특정 음식만 추천)
- 사용자 데이터의 무단 수집 및 저장 